name: $(Build.DefinitionName)_$(clusterName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
- none

pool:
  vmImage: 'windows-2019'

variables:
- template: landingzone-variables.yaml
- name: windowsAmi
  value: Windows_Server-2016-English-Full-Base-*
- name: agent-name
  value: AwsTestSqlCluster02
- name: urlNamingApiV2
  value: https://onecloudselfserviceapi.deloitte.com/api/serverRegistrations
- group: SQL-AWS

parameters:
- name: agentName
  displayName: ADO Agent Name
  default: AwsTestSqlCluster02
  type: string

- name: typeOfEnv
  displayName: Select type of Environment (*) [DE = dev, QA=qa, LD=load, ST=stage, BC = bcp, PD = prod] [The AWS parameter store values needed to be setup with respect to the environment eg:/SqlCluster/dev/adoPat for DE | /SqlCluster/prod/Url for PD]
  default: DE
  type: string
  values:
    - DE
    - QA
    - LD
    - ST
    - BC
    - PD

- name: appServerType
  displayName: Select The Type Of SQL Cluster
  default: Silver
  type: string
  values:
    - Silver
    - Gold

- name: windowsVersion
  displayName: Select the Windows Version
  default: 2019
  type: number
  values:
    - 2016
    - 2019

- name: region1
  displayName: Select Region 1
  default: 'us-east-1'
  type: string
  values:
    - 'us-east-2'
    - 'us-east-1'
    - 'us-west-1'
    - 'us-west-2'

- name: vpcId1
  displayName: Enter VPC ID Region 1
  default: vpc-01da23689ec433526
  type: string

- name: subnetIds1
  displayName: Enter Subnet ID's region 1 (comma seperate one more subnets)
  type: string
  default: subnet-05305d7549ca69c94,subnet-0936ce6c9a3ac80c9

- name: region2
  displayName: Select Region 2
  default: us-west-2
  type: string
  values:
    - 'us-east-2'
    - 'us-east-1'
    - 'us-west-1'
    - 'us-west-2'

- name: vpcId2
  displayName: Enter VPC ID Region 2
  default: vpc-01eb9bf1028fd620d
  type: string

- name: subnetIds2
  displayName: Enter Subnet ID's region 2 (comma seperate one more subnets)
  type: string
  default: subnet-0cb37c00d8b2a6cae,subnet-0d37f9836f6bc9744

- name: instance_type
  displayName: Enter Instance Type
  type: string
  default: r5b.large
  values:
    - r5b.metal
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.8xlarge
    - m5.16xlarge
    - m5.24xlarge
    - m5.metal
    - t3.large
    - t3.xlarge

- name: Edrive
  displayName: Size (GB) for Drive E
  type: number
  default: 150

- name: Fdrive
  displayName: Size (GB) for Drive F
  type: number
  default: 300

- name: Gdrive
  displayName: Size (GB) for Drive G
  type: number
  default: 150

- name: serviceConnection
  displayName: AWS Service Connection Name
  default: SCM DCM MSP Test Account
  type: string

- name: terraformServiceConnection
  displayName:  AWS-Terraform Service Connection Name
  default: AWSDevTerraform1307
  type: string

- name: bucketName
  displayName:  AWS s3 Bucket Name (New bucket with cluster name will be created if No bucket name provided, Recommended to use single s3 bucket for a AWS Account)
  default: Nil
  type: string

- name: clusterName
  displayName: Enter Cluster Name (Use lowercase for clustername)
  default: awscluster01
  type: string

- name: fssOwner
  displayName: Select FSS Owner (*)
  default: ITS
  type: string
  values:
    - ITS
    - AUD
    - ADV
    - ENA
    - TAX
    - CON

- name: skipCluster
  displayName: Change the value to false and run the pipeline only if SQL installation fails for the 1st try
  default: true
  type: string
  values:
  - true
  - false


stages:
- stage: resourceCreation
  jobs:
    - job: init
      variables:
        appServerType: ${{ parameters.appServerType }}
        subnetIds1: "${{ parameters.subnetIds1 }}"
        subnetIds2: "${{ parameters.subnetIds2 }}"
        typeOfEnv: ${{ parameters.typeOfEnv }}
      steps:
      - powershell: |
          $typeOfEnv = "$(typeOfEnv)"
          $env_type = switch ( $typeOfEnv )
          {
              'DE' { 'dev' }
              'QA' { 'qa' }
              'LD' { 'load' }
              'ST' { 'stage' }
              'BC' { 'bcp' }
              'PD' { 'prod' }
              'NPD' { 'nonprod' }
          }
          Write-Host "Type of Environment : " $env_type 
          echo "##vso[task.setvariable variable=env_type;isOutput=true]$env_type"
          echo "##vso[task.setvariable variable=env_type]$env_type"
        name: setTypeOfEnv
        displayName: Set Type Of Environment

      - powershell: |
          echo ''
          echo '----Input Parameters for Resource Group Creation -----'
          echo ''
          echo 'App Server Type             : ${{parameters.appServerType}}'
          echo 'Location 1                  : ${{ parameters.region1 }}'
          echo 'Location 2                  : ${{ parameters.region2 }}'
          echo 'FSS Owner                   : ${{ parameters.fssOwner }} '
          echo 'Type of Environment         : ${{ parameters.typeOfEnv }} '
          echo 'System name for Naming API  : ${{ parameters.clusterName }} '
          echo 'Agent Pool Name             : ${{ parameters.clusterName }} '
          echo 'ADO Organization            : $(System.CollectionUri)'
          echo 'App Server Type             : ${{ parameters.appServerType }}'
          echo 'Windows Version             : ${{ parameters.windowsVersion }} '
          echo 'VPC ID Region 1             : ${{ parameters.vpcId1 }}'
          echo 'subnet Ids Location1        : ${{ parameters.subnetIds1 }}'
          echo 'VPC ID Region 2             : ${{ parameters.vpcId1 }}'
          echo 'subnet Ids Location2        : ${{ parameters.subnetIds2 }}'
          echo 'Instance Type               : ${{ parameters.instance_type }}'
          echo 'E Drive                     : ${{ parameters.Edrive }}'
          echo 'F Drive                     : ${{ parameters.Fdrive }}'
          echo 'G Drive                     : ${{ parameters.Gdrive }}'
          echo 'S3 bucketName               : ${{ parameters.bucketName }}'
          try {
            Write-Host 'ADO URL                     : '$(System.CollectionUri)''
            Write-Host 'ADO PAT                     : '$(adoPat)''
            Write-Host 'Client Secret               : '$(client-secret)''
            Write-Host 'Country Code                : '$(country-code)''
            Write-Host 'Naming Client ID            : '$(namingClientId)''
            Write-Host 'Service User                : '$(saadminuser)''
            Write-Host 'SQL Agent URL               : '$(System.CollectionUri)''
            Write-Host 'SQL Setup User              : '$(sqlsetupuser)''
            Write-Host 'SQL setup password          : '$(sqlsetuppass)''
            Write-Host 'Oauth Api URL               : '$(urlOauthApi)''
            Write-Host 'Naming Api URL V2           : '$(urlNamingApiV2)''
          }

          catch {
            Write-Host "-----------------------------------------------------------------"
            Write-Error "An error occurred: Check the AWS Parameter store values provided"
            Write-Host "-----------------------------------------------------------------"
            Write-Host $_
            Exit 0
          }


          $temp = "$(appServerType)"
          if ( $temp -eq 'Silver' ){
            $appServers1 = 2
            $appServers2 = 1
          } elseif ( $temp -eq 'Gold' ){
            $appServers1 = 2 ;
            $appServers2 = 2 ;
          } else {
            Write-Host "Else"
            $appServers1 = 0 ;
            $appServers2 = 0 ;
          }
          echo "##vso[task.setvariable variable=appServers1]$appServers1"
          echo "##vso[task.setvariable variable=appServers2]$appServers2"
        displayName: Display Parameters

      - template: steps/request-server.yaml
        parameters:
          fssOwner: ${{ parameters.fssOwner }}
          typeOfEnv: ${{ parameters.typeOfEnv }}
          clusterName: ${{ parameters.clusterName }}
          region: ${{ parameters.region1 }}
          appServers: $(appServers1)

      - task: PowerShell@2
        displayName: 'Display location1 VM Names'
        name: SetVmNames1
        enabled: true
        inputs:
          filePath: '$(System.DefaultWorkingDirectory)/LandingZoneAWS/set-vm-json.ps1'
          arguments: >
            -location     1    

      - template: steps/request-server.yaml
        parameters:
          fssOwner: ${{ parameters.fssOwner }}
          typeOfEnv: ${{ parameters.typeOfEnv }}
          clusterName: ${{ parameters.clusterName }}
          region: ${{ parameters.region2 }}
          appServers: $(appServers2)

      - task: PowerShell@2
        displayName: 'Display location2 VM Names'
        name: SetVmNames2
        enabled: true
        inputs:
          filePath: '$(System.DefaultWorkingDirectory)/LandingZoneAWS/set-vm-json.ps1'
          arguments: >
            -vms1         '$(vms1)'
            -subnetIds1   '$(subnetIds1)'
            -subnetIds2   '$(subnetIds2)'
            -location     2
    - job: createResources
      displayName: Create Ec2 Instances
      dependsOn:
        - init
      variables:
        vmsJson: $[ dependencies.init.outputs['SetVmNames2.vmsJson'] ]
        appServerType: ${{ parameters.appServerType }}
        list1: $[ dependencies.init.outputs['SetVmNames1.list1'] ]
        list2: $[ dependencies.init.outputs['SetVmNames2.list2'] ]
        vpcId1: ${{ parameters.vpcId1 }}
        vpcId2: ${{ parameters.vpcId2 }}
        instance_type: ${{ parameters.instance_type }}
        terraformDir: LandingZoneAWS/terraform
        subnetlist1: $[ dependencies.init.outputs['SetVmNames2.subnetlist1'] ]
        subnetlist2: $[ dependencies.init.outputs['SetVmNames2.subnetlist2'] ]
        clusterName: ${{ parameters.clusterName }}
        env_type: $[ dependencies.init.outputs['setTypeOfEnv.env_type'] ]
        region2: ${{ parameters.region2 }}
        region1: ${{ parameters.region1 }}
        windowsAmi: "Windows_Server-${{ parameters.windowsVersion }}-English-Full-Base-*"
        Edrive : ${{ parameters.Edrive }}
        Fdrive : ${{ parameters.Fdrive }}
        Gdrive : ${{ parameters.Gdrive }}
      steps:
        - template: steps/set-variable.yaml
          parameters:
            rootDirectory: $(System.DefaultWorkingDirectory)/LandingZoneAWS/terraform
        - template: steps/terraform-deploy.yaml
          parameters:
            workingDirectory: $(System.DefaultWorkingDirectory)/LandingZoneAWS/terraform
            terraformServiceConnection: ${{ parameters.terraformServiceConnection }}
            backendAWSBucketName: "dcm-sql-server-dev-sqlpool6"
            clusterName: ${{ parameters.clusterName }}